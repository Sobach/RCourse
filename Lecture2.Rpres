R iRL 2
========================================================
author: Alexander Tolmach
date: April 2015

## Data types

Basic operators
========================================================

Assignment

```{r}
var <- c(1,2,3,4)
names(var) <- c('first', 'second', 'third', 'fourth')
var
```

Comment
```{r}
# This is a comment 
# nothing happens
```

Basic operators
========================================================

Explicit printing
```{r}
print(pi)
```

Objects
========================================================

Everything in R is an object. Every object belongs to it's class.

* character

```{r, eval=F}
var <- 'Hello, world!'
```

* numeric/integer
```{r, eval=FALSE}
var1 <- 5.143
var2 <- 10L # Specify L to get integer
```

* logical
```{r, eval=FALSE}
var <- FALSE
```

Objects
========================================================

Custom object classes:
* factor

  For categorial variables. Has levels scale. It's character var with levels.
  
* date/time objects

  Main objects: POSIXlt/POSIXct/Date. It's numeric var with formatting.

* functions

Factors
========================================================

Better than numbers: 
* self-describing
* treated specially by functions like `lm()`

Issues:
* self-apearing
* Missings due to factor-levels

So:

```{r}
options(stringsAsFactors=FALSE)
```

Date/time
========================================================

* POSIXct: seconds since UNIX epoch
* POSIXlt: list of day, month, year, hour, minute, second, etc.
* Date: days since UNIX epoch

POSIXlt most convinient wrapper - it has vars like `sec`, `min`, `hour`, `mday`, `year`, etc.

```{r}
?POSIXlt
```

Functions on object classes
========================================================

Get class

```{r}
class('Hello')
class(pi)
class(Sys.Date())
```

Functions on object classes
========================================================

Transform class

```{r}
as.character(pi)
as.Date('2015-05-01')
as.numeric(Sys.Date())
```

Special values
========================================================

Special cases of numbers:
* `Inf` - Infinity:

```{r}
1/0
```

* `NaN` - Not a number:

```{r}
0/0
```

Special values
========================================================

NA - values - missing values

Have class: NA numeric, NA character

`is.na(x)` - function to test NA's, `is.nan(x)` is also possible

NaN is NA (always), but converse is not true 

Object attributes
========================================================

names, dimnames, class, length, etc.

```{r}
names(iris)
class(pi)
length(iris$Species)
```

Object sequences
========================================================

```{r}
s1 <- 1:10
s1
s2 <- rep(1, 10)
s2
s3 <- c(10, 9, 1, 3)
s3
```

Object sequences
========================================================

* vector: 

  main sequence type (all elements are of the same type), not an object itself

* list: 

  special sequence type (elements may be of different type), and special type of object

* data.frame: 

  list of vectors - table with data

Vector
========================================================

Vector notation

```{r}
v <- c(1, 2, 3, 4, 5)
```

Single variable is just a vector of length 1

```{r}
is.vector(5)
```

Vector itself is not a class

```{r}
class(v)
```

Vector
========================================================

Class of vector will be updated in case of higher level variable.

```{r}
v <- c(1, 2, 3)
class(v)
v <- append(v, 'Hello')
class(v)
v
```

Matrix
========================================================

Matrix is a multidimensional vector
```{r}
m <- 1:10
dim(m) <- c(2, 5)
m
```

List
========================================================

List can contain elements of different classes.

```{r}
l <- list(df = head(iris, 2), v = 1:10)
l
```

Data.frame
========================================================

List of vectors: used to store tabular data

Main data type for analysis purposes

```{r}
head(iris)
```

Subseting
========================================================

Three possible options:

* `[` - returns same class, as original. Multiple selection possible.
* `[[` - extracts single element of a list (or data.frame).
* `$` - almost same as `[[` - used to extract single element by name.

Slicing [...]
========================================================

```{r}
v <- c(1,2,3,4,5,6,7)
```

Numerical or logical index could be used.

```{r}
v[3:5]
v[v < 4]
```

Logical vectors
========================================================

Extremly useful

```{r}
v < 4
```

Complex logical structures could be used

```{r, eval=FALSE}
& - AND
| - OR
! - NOT
== - EQUAL TO
```

Slicing multidimensional objects
========================================================

```{r}
x <- matrix(1:6, 2, 3)
x
x[2, 2]
x[, 3]
```

Subsetting lists
========================================================

```{r}
x <- list(var1 = 1:10, var2 = FALSE)
x[1]
x[[1]]
x$var1
```

Removing NA's
========================================================

```{r}
x <- c(1, 2, NA, 4, NA, 5)
bad <- is.na(x)
x[!bad]
x[!is.na(x)]
```

Look also on `complete.cases()` function
```{r, eval=FALSE}
complete.cases(airquality)
```


Vectorized operations
========================================================

Operations executed in parallel

```{r}
x <- 1:10
y <- 6:15
x + y
x / y
```

Code become easier

Reading and writing data
========================================================

* `read.table` / `read.csv` - reading tabular data
* `readLines` - reading any character data
* `source` - reading .R code files

?read.table
========================================================

* `file` - filename
* `header` - T/F
* `sep` - column separator
* `quote` - quote sign
* `dec` - decimal sign
...

Aliases: read.csv, read.csv2, read.delim, read.delim2

Example
========================================================

```{r}
setwd('~/Documents/RCourse')
readLines('g_analytics.csv', n=10)
df <- read.csv('g_analytics.csv', header=T, skip=6)
```

Example
========================================================

```{r}
tail(df, 3)
df <- df[complete.cases(df), ]
df$date <- as.Date(df$Day.Index, format='%m/%d/%y')
df[df$date > as.Date('2015-04-15'),]
```

Homework
========================================================

File `vkontakte_group.csv` - is an export stats file from our VK community.

1. Use `readLines()` to understand, what separators and quotes are used.
2. Use right `read.table` option to read file.
3. Use `as.Date` function to recode date object.
4. Slice data.frame to march only data.
5. Compute overall number of visitors and views during march (`?sum`).
Extra: Compute female/male ratio for march visitors.